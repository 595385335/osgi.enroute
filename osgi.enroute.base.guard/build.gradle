import aQute.bnd.build.Run
import aQute.bnd.osgi.Domain
import aQute.bnd.osgi.repository.ResourcesRepository
import aQute.bnd.osgi.resource.CapabilityBuilder
import aQute.bnd.osgi.resource.ResourceBuilder
import biz.aQute.resolve.ProjectResolver
import org.osgi.resource.Capability
import org.osgi.resource.Resource
import org.osgi.service.resolver.ResolutionException

/* Add biz.aQute.resolve as a script dependency */
buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'biz.aQute.bnd:biz.aQute.resolve:3.2.0'
  }
}

check {
  enabled true
  doLast {
    /* Build list of Resources for the workspace */
    List<Resource> resources = []
    bndWorkspace.getAllProjects().each { p ->
      p.getBuildFiles(false)?.each { file ->
        Domain manifest = Domain.domain(file)
        ResourceBuilder rb = new ResourceBuilder() {
          // Workaround bug in bnd 3.2: addManifest sets type of bundles to fragment
          public ResourceBuilder addCapability(Capability capability) {
            CapabilityBuilder builder = new CapabilityBuilder(capability.getNamespace())
            Map<String,Object> attributes = capability.getAttributes()
            if (builder.isIdentity() && (manifest.getFragmentHost() == null) && (attributes['type'] != 'osgi.bundle')) {
              logger.info '{} setting type to osgi.bundle; was {}', attributes['osgi.identity'], attributes['type']
              attributes = new HashMap<String,Object>(attributes)
              attributes['type'] = 'osgi.bundle'
            }
            builder.addAttributes(attributes)
            builder.addDirectives(capability.getDirectives())
            return addCapability(builder)
          }
        }
        rb.addManifest(manifest)
        Resource resource = rb.build()
        resources += resource
      }
    }

    /* Validate the guard check resolves */
    File bndrun = file('enroute-distro.bndrun')
    Run.createRun(bndWorkspace, bndrun).withCloseable { run ->
      run.addBasicPlugin(new ResourcesRepository(resources) {
        public String toString() {
            return 'Workspace'
        }
      })
      new ProjectResolver(run).withCloseable { resolver ->
        ResolutionException exception = null
        try {
          resolver.resolve()
        } catch (ResolutionException e) {
          exception = e
          resolver.exception(e, 'Unresolved requirements: %s', "${e.getUnresolvedRequirements()}")
        }
        resolver.getWarnings().each {
          logger.warn 'Warning: {}', it
        }
        resolver.getErrors().each {
          logger.error 'Error  : {}', it
        }
        if (!resolver.isOk()) {
          throw new GradleException("File ${bndrun} does not resolve", exception)
        }
      }
    }
  }
}
